[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "awslabs-ci-pipeline"
version = "0.1.0"
description = "AWS Labs Local CI/CD Pipeline - Complete testing environment for AWS MCP server projects"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
authors = [
    {name = "Amazon Web Services", email = "aws-labs@amazon.com"},
]
keywords = ["aws", "ci", "pipeline", "mcp", "testing", "github-actions"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Software Distribution",
]

dependencies = [
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
]

bedrock = [
    "litellm[bedrock]>=1.0.0",
    "boto3>=1.28.0",
    "botocore>=1.31.0",
]

claude = [
    "anthropic>=0.18.0",
]

security = [
    "bandit>=1.7.0",
    "detect-secrets>=1.4.0",
    "safety>=2.0.0",
]

all = [
    "awslabs-ci-pipeline[dev,bedrock,claude,security]",
]

[project.scripts]
awslabs-ci = "awslabs_ci_tool.cli:main"

[project.urls]
Homepage = "https://github.com/awslabs/mcp-servers"
Documentation = "https://github.com/awslabs/mcp-servers/tree/main/docs"
Repository = "https://github.com/awslabs/mcp-servers"
Issues = "https://github.com/awslabs/mcp-servers/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 120
target-version = "py310"
src = ["src", "ci_tool"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # Line too long (handled by line-length)
    "S101",  # Use of assert
    "S603",  # subprocess call with shell=False
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S608"]  # Allow assert and hardcoded passwords in tests
"scripts/*" = ["S602", "S607"]       # Allow subprocess in scripts

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=ci_tool",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:reports/coverage",
    "--cov-report=xml:reports/coverage.xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-focused tests",
]

[tool.coverage.run]
source = ["ci_tool", "src"]
omit = [
    "tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
targets = ["ci_tool", "src"]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used in non-test code

[tool.ci_tool]
# Pipeline-specific configuration
paths.dist = "dist"
paths.coverage = "coverage"
paths.reports = "reports"
paths.cache = "cache"

[tool.ci_tool.runners]
preferred = "orbstack"  # orbstack, act, or native
fallback = true

[tool.ci_tool.workflows]
python_versions = ["3.10", "3.11", "3.12"]
parallel_jobs = 4
