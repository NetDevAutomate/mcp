# AWS Labs CI Pipeline - Python Testing Workflow
name: Python Testing & Coverage

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  # Enable debug logging for local runs
  ACTIONS_RUNNER_DEBUG: ${{ vars.ACTIONS_RUNNER_DEBUG || 'false' }}
  ACTIONS_STEP_DEBUG: ${{ vars.ACTIONS_STEP_DEBUG || 'false' }}
  PROJECT_PATH: ${{ vars.PROJECT_PATH || github.workspace }}

permissions:
  contents: read

jobs:
  detect-python:
    name: 🔍 Detect Python Projects
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find-python.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find Python projects
        id: find-python
        run: |
          echo "🔍 Searching for Python projects..."

          # Look for pyproject.toml files to identify Python projects
          PROJECTS=$(find ${PROJECT_PATH} -name "pyproject.toml" -exec dirname {} \; 2>/dev/null | sort | uniq || echo ".")

          if [ -z "$PROJECTS" ] || [ "$PROJECTS" = "." ]; then
            # Check current directory
            if [ -f "${PROJECT_PATH}/pyproject.toml" ]; then
              PROJECTS="${PROJECT_PATH}"
            else
              echo "⚠️  No Python projects found (no pyproject.toml files)"
              PROJECTS_JSON='[]'
            fi
          fi

          if [ -n "$PROJECTS" ] && [ "$PROJECTS" != "[]" ]; then
            echo "✅ Found Python projects:"
            echo "$PROJECTS" | sed 's/^/  - /'
            PROJECTS_JSON=$(echo "$PROJECTS" | jq -R -s -c 'split("\n")[:-1]')
          fi

          echo "matrix=$PROJECTS_JSON" >> $GITHUB_OUTPUT
          echo "📊 Matrix output: $PROJECTS_JSON"

  python-tests:
    name: 🐍 Python Tests (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: detect-python
    if: needs.detect-python.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        project: ${{ fromJson(needs.detect-python.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv package manager
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Setup project environment
        working-directory: ${{ matrix.project }}
        run: |
          echo "🔧 Setting up Python environment for ${{ matrix.project }}"

          # Initialize uv environment
          uv venv --seed
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

          # Install dependencies
          if [ -f "pyproject.toml" ]; then
            echo "📦 Installing dependencies from pyproject.toml"
            uv sync --all-extras --dev
          else
            echo "⚠️  No pyproject.toml found in ${{ matrix.project }}"
            exit 1
          fi

      - name: Run linting
        working-directory: ${{ matrix.project }}
        run: |
          echo "🔧 Running code linting"
          source .venv/bin/activate

          # Run ruff linting
          ruff check --select ALL --ignore E501 . || echo "Linting issues found"

          # Check formatting
          ruff format --check . || echo "Formatting issues found"

      - name: Run type checking
        working-directory: ${{ matrix.project }}
        run: |
          echo "📝 Running type checking"
          source .venv/bin/activate

          # Run mypy if available
          if python -m mypy --version &>/dev/null; then
            mypy --ignore-missing-imports . || echo "Type checking issues found"
          else
            echo "mypy not available, skipping type checking"
          fi

      - name: Run security scanning
        working-directory: ${{ matrix.project }}
        run: |
          echo "🔒 Running security scanning"
          source .venv/bin/activate

          # Run bandit security scan
          if python -m bandit --version &>/dev/null; then
            bandit -r . -f txt || echo "Security issues found"
          else
            echo "bandit not available, skipping security scan"
          fi

          # Check for secrets
          if command -v detect-secrets &>/dev/null; then
            detect-secrets scan --all-files || echo "Secret scanning issues found"
          else
            echo "detect-secrets not available"
          fi

      - name: Run tests with coverage
        working-directory: ${{ matrix.project }}
        run: |
          echo "🧪 Running tests with coverage"
          source .venv/bin/activate

          # Run pytest with coverage
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing || echo "Some tests failed"
          else
            echo "No tests directory found, skipping tests"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.python-version }}-${{ strategy.job-index }}
          path: |
            ${{ matrix.project }}/htmlcov/
            ${{ matrix.project }}/coverage.xml
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ strategy.job-index }}
          path: |
            ${{ matrix.project }}/pytest-report.xml
            ${{ matrix.project }}/.pytest_cache/
          retention-days: 7
